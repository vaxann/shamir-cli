name: Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run tests
      run: go test -v ./...

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v1.0.$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="shamir-cli"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        ARCHIVE_NAME="shamir-cli-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
        else
          ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
        fi
        
        echo "Building for $GOOS/$GOARCH..."
        go build -v -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o $BINARY_NAME .
        
        # Create archive
        if [ "$GOOS" = "windows" ]; then
          zip $ARCHIVE_NAME $BINARY_NAME README.md examples.md TESTING.md
        else
          tar -czf $ARCHIVE_NAME $BINARY_NAME README.md examples.md TESTING.md
        fi
        
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: shamir-cli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v1.0.$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Display structure of downloaded files
      run: ls -R artifacts
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          # Shamir CLI Release ${{ steps.version.outputs.version }}
          
          ## What's New
          - Latest version of Shamir secret sharing CLI
          - Cross-platform binaries for Linux, macOS, and Windows
          - Built from commit: ${{ github.sha }}
          
          ## Downloads
          Choose the appropriate binary for your platform:
          - **Linux**: `shamir-cli-*-linux-amd64.tar.gz` or `shamir-cli-*-linux-arm64.tar.gz`
          - **macOS**: `shamir-cli-*-darwin-amd64.tar.gz` or `shamir-cli-*-darwin-arm64.tar.gz` (Apple Silicon)
          - **Windows**: `shamir-cli-*-windows-amd64.zip`
          
          ## Usage
          ```bash
          # Split a secret
          ./shamir-cli split "my secret" 5 3
          
          # Combine shares
          ./shamir-cli combine "1:abc123,2:def456,3:789xyz"
          ```
          
          ## Verification
          All binaries are built from the same source code and verified with automated tests.
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        files: artifacts/*/shamir-cli-*